#ifndef _COMMANDS_H_
#define _COMMANDS_H_

//-----------------------------------------------

// PARAMETERS TO USE AS DATA WITH SOME YARP CLIENTS/SERVERS

//-----------------------------------------------

namespace VoiceRecognitions{
	enum Voice_recognition{
		EXITPROGRAM = 0,
		NOTHING, YES, NO,
		TOWER, WINDMILL, LSHAPE, RAILWAYSIGNAL,
		CUBE_BLUE, CUBE_RED, CUBE_YELLOW, CUBE_GREEN,
		BOLT_GREEN,	BOLT_YELLOW, BOLT_RED,
		NUT_ORANGE,
		SLAT_SHORT, SLAT_MEDIUM, SLAT_LONG,
		CUBE, BOLT, SLAT, NUT,
		YELLOWCOLOR, GREENCOLOR, REDCOLOR, BLUECOLOR, ORANGECOLOR,
		SHORTDIM, MEDIUMDIM, LONGDIM,
		WHEEL,COLUMN_ONE,COLUMN_TWO,COLUMN_THREE,COLUMN_FOUR,TOP_FLOOR,ALLCOLUMN,NEXT,
		WHAT_COLOUR_IS_THIS,ARE_YOU_READY_TO_LEARN_COLOURS,THIS_IS_RED,THIS_IS_GREEN,
		THIS_IS_YELLOW,THAT_IS_CORRECT,THAT_IS_NOT_CORRECT,THE_COLOUR_IS_GREEN,
		ARE_YOU_READY_TO_LEARN,LETS_LEARN_COLOURS,LETS_LEARN_FRUITS,LETS_TRY_SOMETHING_ELSE,
		DO_YOU_KNOW_WHAT_FRUIT_IS_THIS,THIS_IS_AN_APPLE,THIS_IS_A_LEMON,THIS_IS_A_LIME,
		WHAT_FRUIT_IS_RED,WHAT_FRUIT_IS_YELLOW,WHAT_FRUIT_IS_GREEN,
		WHAT_THE_COLOUR_OF_THE_APPLE,WHAT_THE_COLOUR_OF_THE_LEMON,WHAT_THE_COLOUR_OF_THE_LIME,
		last_object_recognition
	};
}

//-----------------------------------------------

// COMMANDS TO COMMUNICATE WITH ALL YARP CLIENTS/SERVERS

//-----------------------------------------------

#define NACK	0
#define ACK		1

//----------------------------------------------------------------------------------------------------

#define GLOBAL_COMMANDS			1000
/*enum GlobalCommands {
	START				= (GLOBAL_COMMANDS + 2),
	STOP				= (GLOBAL_COMMANDS + 4),
	TERMINATE			= (GLOBAL_COMMANDS + 6),
	CONNECT				= (GLOBAL_COMMANDS + 8),
	SERVER_TERMINATED	= (GLOBAL_COMMANDS + 10),
	PICK				= (GLOBAL_COMMANDS + 12),
	PLACE				= (GLOBAL_COMMANDS + 14),
};*/

#define MOVE_MOBILE_ARM			1200
enum MoveMobileArmCommands {
	MOV_PICK 		=	(MOVE_MOBILE_ARM + 2),
	MOV_PLACE		=	(MOVE_MOBILE_ARM + 4)
};

//----------------------------------------------------------------------------------------------------

#define VISION_COMMANDS 1400
enum VisionCommands {
	WAKEUP_OBJECT_RECOGNITION			= (VISION_COMMANDS + 2),
	MOVE_CAMERA_HEAD					= (VISION_COMMANDS + 4),
	MOVE_CAMERA_HEAD_ACK,
	DEMAND_IMAGE						= (VISION_COMMANDS + 6),
	DEMAND_IMAGE_ACK,
	OBJECT_RECOGNITION_DONE				= (VISION_COMMANDS + 8),
	OBJECT_RECOGNITION_DONE_ACK,
	OBJECT_RECOGNITION_RESULT			= (VISION_COMMANDS + 10),
	OBJECT_RECOGNITION_RESULT_ACK,
	WAKEUP_HAND_GESTURE_RECOGNITION		= (VISION_COMMANDS + 12),
	HAND_GESTURE_RECOGNITION_RESULT		= (VISION_COMMANDS + 14),
	HAND_GESTURE_RECOGNITION_RESULT_ACK,
};

//----------------------------------------------------------------------------------------------------

#define OMNI_VISION_COMMANDS 1600
enum OmniVisionCommands {
	OMNI_START				= (OMNI_VISION_COMMANDS + 2),
	OMNI_STOP				= (OMNI_VISION_COMMANDS + 4),
	OMNI_TERMINATE			= (OMNI_VISION_COMMANDS + 6),
	OMNI_GET_OBJECTS		= (OMNI_VISION_COMMANDS + 8),
	OMNI_GET_OBJECTS_ACK,
	OMNI_GET_AGENTS			= (OMNI_VISION_COMMANDS + 10),
	OMNI_GET_AGENTS_ACK
};

//----------------------------------------------------------------------------------------------------

#define NAVIGATION_COMMANDS 1800
enum NavigationCommands {
	NAVIGATION_START				= (NAVIGATION_COMMANDS + 2),
	NAVIGATION_STOP					= (NAVIGATION_COMMANDS + 4),
	NAVIGATION_TERMINATE			= (NAVIGATION_COMMANDS + 6),
	NAVIGATION_SET_MODE				= (NAVIGATION_COMMANDS + 8),
	NAVIGATION_SET_ROBOT_TAG		= (NAVIGATION_COMMANDS + 10),
	NAVIGATION_SET_TARGET_SOURCE	= (NAVIGATION_COMMANDS + 12),
	NAVIGATION_SET_TARGET_POSITION	= (NAVIGATION_COMMANDS + 14),
	NAVIGATION_GET_ROBOT_INFO		= (NAVIGATION_COMMANDS + 16),
};

//----------------------------------------------------------------------------------------------------

#define SIMULATION_COMMANDS 2000
enum SimulationCommands {
	SIMULATION_START				= (SIMULATION_COMMANDS + 2),
	SIMULATION_STOP					= (SIMULATION_COMMANDS + 4),
	SIMULATION_CONNECT_ROBOT		= (SIMULATION_COMMANDS + 6),
	SIMULATION_DISCONNECT_ROBOT		= (SIMULATION_COMMANDS + 8),
	SIMULATION_CONNECT_ARM			= (SIMULATION_COMMANDS + 10),
	SIMULATION_UPDATE_ROBOT_INFO	= (SIMULATION_COMMANDS + 12),
};

//----------------------------------------------------------------------------------------------------

#define SENSORS_COMMANDS 2200
enum SensorsCommands {
	GET_OBSTACLES_DISTANCE = (SENSORS_COMMANDS+2),
};

//----------------------------------------------------------------------------------------------------
// AmtecLWA7DOF server

#define AMTEC_COMMAND	2400
enum Amtec_Command {
	AMTEC_TERMINATE					= (AMTEC_COMMAND + 2),	
	AMTEC_HOME						= (AMTEC_COMMAND + 4),	//Perform a home to joints by a specific order
	AMTEC_HOME_JOINT				= (AMTEC_COMMAND + 6),	//Performe a home to a specific joint
	AMTEC_RESET_JOINT				= (AMTEC_COMMAND + 8),
	AMTEC_RESET_ALL					= (AMTEC_COMMAND + 10),
	AMTEC_STOP_JOINT				= (AMTEC_COMMAND + 12),
	AMTEC_STOP_ALL					= (AMTEC_COMMAND + 14),
	AMTEC_MOVE_STEP					= (AMTEC_COMMAND + 16),	//Move specific joint(Does not wait for motion end)
	AMTEC_MOVE_STEP_ALL				= (AMTEC_COMMAND + 18), 
	AMTEC_MOVE_ALL_VEL				= (AMTEC_COMMAND + 20),
	AMTEC_MOVE_ALL_VEL_TRAJ			= (AMTEC_COMMAND + 22),
	AMTEC_GET_POS					= (AMTEC_COMMAND + 24),
	AMTEC_GET_POS_ALL				= (AMTEC_COMMAND + 26),
	AMTEC_MOVE_STEP_ALL_SAME_TIME	= (AMTEC_COMMAND + 28),
	AMTEC_OPENGRIPPER				= (AMTEC_COMMAND + 30),
	AMTEC_CLOSEGRIPPER				= (AMTEC_COMMAND + 32),
	AMTEC_GET_FORCE_TORQUE			= (AMTEC_COMMAND + 34),
	AMTEC_RESTART_MODULE			= (AMTEC_COMMAND + 36),
	AMTEC_MOVE_VEL_JOINT			= (AMTEC_COMMAND + 38),	//Move a specific joint at a desired speed(rad/s)(joint number must be stored in uParam[0], velocity in fData[0]
	AMTEC_MOVE_VEL					= (AMTEC_COMMAND + 40),	//Move all joints at specified speeds(rad/s)( velocities in fData, must have at least Number_of_Joints velocities
	AMTEC_HOME_ALL					= (AMTEC_COMMAND + 42),	//Perform a home to joints by a specific order
	AMTEC_GET_POS_DEG				= (AMTEC_COMMAND + 44),
	AMTEC_GET_POS_DEG_ALL			= (AMTEC_COMMAND + 46),
	AMTEC_MOVE_STEP_WAIT			= (AMTEC_COMMAND + 48), //Move specific joint( wait for motion end)
	AMTEC_FREE_JOINT				= (AMTEC_COMMAND + 50), //Free specified joint(release break)
	AMTEC_GET_GRIPPER				= (AMTEC_COMMAND + 52), //get gripper position
	AMTEC_HOME_GRIPPER				= (AMTEC_COMMAND + 54),	//performe a home command to gripper
	AMTEC_INV_KIN					= (AMTEC_COMMAND + 56),
	AMTEC_SOFT_STOP					= (AMTEC_COMMAND + 58),	//Performe a software stop to arm joints
	AMTEC_MOVE_STEP_SAME_TIME_WAIT  = (AMTEC_COMMAND + 60), //Move all joints and wait for motion end
	AMTEC_WAIT_MOTION_END			= (AMTEC_COMMAND + 62), //wait for motion end
	AMTEC_MOVE_STEP_SAME_TIME_SEL	= (AMTEC_COMMAND + 64), //Move the specified joints to a position during the same time.
	AMTEC_MOVE_STEP_TRAJECTORY		= (AMTEC_COMMAND + 66),
	AMTEC_WAIT_TRAJECTORY_END		= (AMTEC_COMMAND + 68),
	AMTEC_STOP_CLEAR_TRAJECTORY		= (AMTEC_COMMAND + 70),
	AMTEC_WAIT_TRAJECTORY_END_ASYNC = (AMTEC_COMMAND + 72),
	AMTEC_TRAJECTORY_ASYNC_FINISHED = (AMTEC_COMMAND + 74),
};


//----------------------------------------------------------------------------------------------------
// AmtecLWA7DOF server

#define TWOAMTEC_COMMAND	9400
enum TwoAmtec_Command {
	TWOAMTEC_HOME							= (TWOAMTEC_COMMAND + 2),	//Perform a home to joints by a specific order
	TWOAMTEC_HOME_JOINT						= (TWOAMTEC_COMMAND + 4),	//Performe a home to a specific joint
	TWOAMTEC_HOME_ALL						= (TWOAMTEC_COMMAND + 6),	//Perform a home to joints by a specific order
	TWOAMTEC_HOME_GRIPPER					= (TWOAMTEC_COMMAND + 8),	//performe a home command to gripper
	TWOAMTEC_RESET_JOINT					= (TWOAMTEC_COMMAND + 10),
	TWOAMTEC_RESET_ALL						= (TWOAMTEC_COMMAND + 12),
	TWOAMTEC_STOP_JOINT						= (TWOAMTEC_COMMAND + 14),
	TWOAMTEC_STOP_ALL						= (TWOAMTEC_COMMAND + 16),
	TWOAMTEC_SOFT_STOP						= (TWOAMTEC_COMMAND + 18),	//Performe a software stop to arm joints
	TWOAMTEC_RESTART_MODULE					= (TWOAMTEC_COMMAND + 20),
	TWOAMTEC_FREE_JOINT						= (TWOAMTEC_COMMAND + 22), //Free specified joint(release break)
	TWOAMTEC_WAIT_MOTION_END				= (TWOAMTEC_COMMAND + 24), //wait for motion end
	TWOAMTEC_OPENGRIPPER					= (TWOAMTEC_COMMAND + 26),
	TWOAMTEC_CLOSEGRIPPER					= (TWOAMTEC_COMMAND + 28),
	TWOAMTEC_GET_POS						= (TWOAMTEC_COMMAND + 30),
	TWOAMTEC_GET_POS_ALL					= (TWOAMTEC_COMMAND + 32),
	TWOAMTEC_GET_POS_DEG					= (TWOAMTEC_COMMAND + 34),
	TWOAMTEC_GET_POS_DEG_ALL				= (TWOAMTEC_COMMAND + 36),
	TWOAMTEC_GET_GRIPPER_POS				= (TWOAMTEC_COMMAND + 38), //get gripper position
	TWOAMTEC_GET_FORCE_TORQUE				= (TWOAMTEC_COMMAND + 40),
	TWOAMTEC_MOVE_STEP						= (TWOAMTEC_COMMAND + 42),	//Move specific joint(Does not wait for motion end)
	TWOAMTEC_MOVE_STEP_WAIT					= (TWOAMTEC_COMMAND + 44), //Move specific joint( wait for motion end)
	TWOAMTEC_MOVE_STEP_ALL					= (TWOAMTEC_COMMAND + 46),
	TWOAMTEC_MOVE_STEP_ALL_SAME_TIME		= (TWOAMTEC_COMMAND + 48),
	TWOAMTEC_MOVE_STEP_ALL_SAME_TIME_WAIT	= (TWOAMTEC_COMMAND + 50), //Move all joints and wait for motion end
	TWOAMTEC_MOVE_STEP_SAME_TIME_SEL		= (TWOAMTEC_COMMAND + 52), //Move the specified joints to a position during the same time.
	TWOAMTEC_MOVE_STEP_ALL_SAME_VEL			= (TWOAMTEC_COMMAND + 54),
	TWOAMTEC_MOVE_VEL						= (TWOAMTEC_COMMAND + 56),	//Move a specific joint at a desired speed(rad/s)(joint number must be stored in uParam[0], velocity in fData[0]
	TWOAMTEC_MOVE_VEL_ALL					= (TWOAMTEC_COMMAND + 58),	//Move all joints at specified speeds(rad/s)( velocities in fData, must have at least Number_of_Joints velocities
	TWOAMTEC_MOVE_TRAJ_VEL_ALL				= (TWOAMTEC_COMMAND + 60),
	TWOAMTEC_MOVE_STEP_TRAJECTORY			= (TWOAMTEC_COMMAND + 62),
	TWOAMTEC_WAIT_TRAJECTORY_END			= (TWOAMTEC_COMMAND + 64),
	TWOAMTEC_STOP_CLEAR_TRAJECTORY			= (TWOAMTEC_COMMAND + 66),
	TWOAMTEC_WAIT_TRAJECTORY_END_ASYNC		= (TWOAMTEC_COMMAND + 68),
	TWOAMTEC_TRAJECTORY_ASYNC_FINISHED		= (TWOAMTEC_COMMAND + 70),
};

namespace UpperLimb
{
#define UPPERLIMB_COMMAND	10000
	enum UpperLimb_Command {
		ADD_TRAJECTORY				= (UPPERLIMB_COMMAND + 2),
		WAIT_TRAJECTORY_END			= (UPPERLIMB_COMMAND + 4),
		STOP_CLEAR_TRAJECTORY		= (UPPERLIMB_COMMAND + 6),
		WAIT_TRAJECTORY_END_ASYNC	= (UPPERLIMB_COMMAND + 8),
		TRAJECTORY_ASYNC_FINISHED	= (UPPERLIMB_COMMAND + 10),
		CONFIGURE_LIMBS				= (UPPERLIMB_COMMAND + 12),
		//GET_POSTURE					= (UPPERLIMB_COMMAND + 14),
		GET_POSITIONS				= (UPPERLIMB_COMMAND + 14),
		GET_VELOCITIES				= (UPPERLIMB_COMMAND + 16),
		SET_POSITIONS				= (UPPERLIMB_COMMAND + 18),
		SET_VELOCITIES				= (UPPERLIMB_COMMAND + 20),
		GRASP_OBJECT				= (UPPERLIMB_COMMAND + 22),
		RELEASE_OBJECT				= (UPPERLIMB_COMMAND + 24),
		WAIT_EVENT					= (UPPERLIMB_COMMAND + 26),
		WAIT_EVENT_ASYNC			= (UPPERLIMB_COMMAND + 28),
		WAIT_EVENT_SIGNALED			= (UPPERLIMB_COMMAND + 30),
		ADD_VEL_TRAJECTORY			= (UPPERLIMB_COMMAND + 32),
		WAIT_VEL_TRAJECTORY_END			= (UPPERLIMB_COMMAND + 34),
		WAIT_VEL_TRAJECTORY_END_ASYNC	= (UPPERLIMB_COMMAND + 36),
		VEL_TRAJECTORY_ASYNC_FINISHED	= (UPPERLIMB_COMMAND + 38),
	};

	enum Events
	{
		RobotHandNoObject = 1,
		AttachedBottleNoCap,
	};

	enum EventTimeout
	{
		None = 0,
		Infinit = -1
	};

	enum EventResult
	{
		Failure = 0,
		Timeout,
		NonSignaled,
		Signaled
	};
}



//----------------------------------------------------------------------------------------------------
// BarrettHand server

#define BARRETTHAND_COMMAND	2600
enum BarrettHand_Command {
	BARRETTHAND_TERMINATE				= (BARRETTHAND_COMMAND + 2),
	BARRETTHAND_INITIALIZE				= (BARRETTHAND_COMMAND + 4),
	BARRETTHAND_INITJOINT				= (BARRETTHAND_COMMAND + 6),
	BARRETTHAND_OPENJOINT				= (BARRETTHAND_COMMAND + 8),
	BARRETTHAND_OPEN					= (BARRETTHAND_COMMAND + 10),
	BARRETTHAND_CLOSEJOINT				= (BARRETTHAND_COMMAND + 12),
	BARRETTHAND_CLOSE					= (BARRETTHAND_COMMAND + 14),
	BARRETTHAND_TORQUEOPEN_JOINT		= (BARRETTHAND_COMMAND + 16),
	BARRETTHAND_TORQUEOPEN				= (BARRETTHAND_COMMAND + 18),
	BARRETTHAND_TORQUECLOSE_JOINT		= (BARRETTHAND_COMMAND + 20),
	BARRETTHAND_TORQUECLOSE				= (BARRETTHAND_COMMAND + 22),
	BARRETTHAND_MOVEJOINT				= (BARRETTHAND_COMMAND + 24),
	BARRETTHAND_MOVEALL					= (BARRETTHAND_COMMAND + 26),
	BARRETTHAND_SETOPENTARGET			= (BARRETTHAND_COMMAND + 28),
	BARRETTHAND_SETCLOSETARGET			= (BARRETTHAND_COMMAND + 30),
	BARRETTHAND_GETOPENTARGET			= (BARRETTHAND_COMMAND + 32),
	BARRETTHAND_GETCLOSETARGET			= (BARRETTHAND_COMMAND + 34),
	BARRETTHAND_SETVELOCITY				= (BARRETTHAND_COMMAND + 36),
	BARRETTHAND_GETVELOCITY				= (BARRETTHAND_COMMAND + 38),
	BARRETTHAND_SETACCELERATION			= (BARRETTHAND_COMMAND + 40),
	BARRETTHAND_GETACCELERATION			= (BARRETTHAND_COMMAND + 42),
	BARRETTHAND_INCREMENTALMOVEJOINT	= (BARRETTHAND_COMMAND + 44),
	BARRETTHAND_INCREMENTALMOVEALL		= (BARRETTHAND_COMMAND + 46),
	BARRETTHAND_SETOPENTARGETJOINT		= (BARRETTHAND_COMMAND + 48),
	BARRETTHAND_SETCLOSETARGETJOINT		= (BARRETTHAND_COMMAND + 50),
	BARRETTHAND_GETOPENTARGETJOINT		= (BARRETTHAND_COMMAND + 52),
	BARRETTHAND_GETCLOSETARGETJOINT		= (BARRETTHAND_COMMAND + 54),
	BARRETTHAND_MOVEFINGERS				= (BARRETTHAND_COMMAND + 56),
	BARRETTHAND_MOVESPREAD				= (BARRETTHAND_COMMAND + 58),
	BARRETTHAND_MOVETWOFINGERS			= (BARRETTHAND_COMMAND + 60),
	BARRETTHAND_SETOPENVELOCITY			= (BARRETTHAND_COMMAND + 62),
	BARRETTHAND_SETCLOSEVELOCITY		= (BARRETTHAND_COMMAND + 64),
	BARRETTHAND_GETSTRAINGAUGE			= (BARRETTHAND_COMMAND + 66),
	BARRETTHAND_GETPOSITIONS			= (BARRETTHAND_COMMAND + 68),
	BARRETTHAND_MOVETWOFINGERS_WAIT		= (BARRETTHAND_COMMAND + 70),
	BARRETTHAND_MOVEALLFINGERS_WAIT		= (BARRETTHAND_COMMAND + 72),
	BARRETTHAND_MOVEFINGERS_WAIT		= (BARRETTHAND_COMMAND + 74),
	BARRETTHAND_MOVESPREAD_WAIT			= (BARRETTHAND_COMMAND + 76),
	BARRETTHAND_MOVEJOINT_WAIT			= (BARRETTHAND_COMMAND + 78),
	BARRETTHAND_MOVEALLFINGERS			= (BARRETTHAND_COMMAND + 80),
	BARRETTHAND_SETMAXSTRAINGAUGE		= (BARRETTHAND_COMMAND + 82),
	BARRETTHAND_GETMAXSTRAINGAUGE		= (BARRETTHAND_COMMAND + 84),
	BARRETTHAND_WRITE_COMMAND_RAW		= (BARRETTHAND_COMMAND + 86),
};


//----------------------------------------------------------------------------------------------------
// BarrettHand server

#define TWOBARRETTHAND_COMMAND	9800
enum TwoBarrettHand_Command {
	TWOBARRETTHAND_TERMINATE				= (TWOBARRETTHAND_COMMAND + 2),
	TWOBARRETTHAND_INITIALIZE				= (TWOBARRETTHAND_COMMAND + 4),
	TWOBARRETTHAND_INITJOINT				= (TWOBARRETTHAND_COMMAND + 6),
	TWOBARRETTHAND_OPENJOINT				= (TWOBARRETTHAND_COMMAND + 8),
	TWOBARRETTHAND_OPEN						= (TWOBARRETTHAND_COMMAND + 10),
	TWOBARRETTHAND_CLOSEJOINT				= (TWOBARRETTHAND_COMMAND + 12),
	TWOBARRETTHAND_CLOSE					= (TWOBARRETTHAND_COMMAND + 14),
	TWOBARRETTHAND_TORQUEOPEN_JOINT			= (TWOBARRETTHAND_COMMAND + 16),
	TWOBARRETTHAND_TORQUEOPEN				= (TWOBARRETTHAND_COMMAND + 18),
	TWOBARRETTHAND_TORQUECLOSE_JOINT		= (TWOBARRETTHAND_COMMAND + 20),
	TWOBARRETTHAND_TORQUECLOSE				= (TWOBARRETTHAND_COMMAND + 22),
	TWOBARRETTHAND_MOVEJOINT				= (TWOBARRETTHAND_COMMAND + 24),
	TWOBARRETTHAND_MOVEALL					= (TWOBARRETTHAND_COMMAND + 26),
	TWOBARRETTHAND_SETOPENTARGET			= (TWOBARRETTHAND_COMMAND + 28),
	TWOBARRETTHAND_SETCLOSETARGET			= (TWOBARRETTHAND_COMMAND + 30),
	TWOBARRETTHAND_GETOPENTARGET			= (TWOBARRETTHAND_COMMAND + 32),
	TWOBARRETTHAND_GETCLOSETARGET			= (TWOBARRETTHAND_COMMAND + 34),
	TWOBARRETTHAND_SETVELOCITY				= (TWOBARRETTHAND_COMMAND + 36),
	TWOBARRETTHAND_GETVELOCITY				= (TWOBARRETTHAND_COMMAND + 38),
	TWOBARRETTHAND_SETACCELERATION			= (TWOBARRETTHAND_COMMAND + 40),
	TWOBARRETTHAND_GETACCELERATION			= (TWOBARRETTHAND_COMMAND + 42),
	TWOBARRETTHAND_INCREMENTALMOVEJOINT		= (TWOBARRETTHAND_COMMAND + 44),
	TWOBARRETTHAND_INCREMENTALMOVEALL		= (TWOBARRETTHAND_COMMAND + 46),
	TWOBARRETTHAND_SETOPENTARGETJOINT		= (TWOBARRETTHAND_COMMAND + 48),
	TWOBARRETTHAND_SETCLOSETARGETJOINT		= (TWOBARRETTHAND_COMMAND + 50),
	TWOBARRETTHAND_GETOPENTARGETJOINT		= (TWOBARRETTHAND_COMMAND + 52),
	TWOBARRETTHAND_GETCLOSETARGETJOINT		= (TWOBARRETTHAND_COMMAND + 54),
	TWOBARRETTHAND_MOVEFINGERS				= (TWOBARRETTHAND_COMMAND + 56),
	TWOBARRETTHAND_MOVESPREAD				= (TWOBARRETTHAND_COMMAND + 58),
	TWOBARRETTHAND_MOVETWOFINGERS			= (TWOBARRETTHAND_COMMAND + 60),
	TWOBARRETTHAND_SETOPENVELOCITY			= (TWOBARRETTHAND_COMMAND + 62),
	TWOBARRETTHAND_SETCLOSEVELOCITY			= (TWOBARRETTHAND_COMMAND + 64),
	TWOBARRETTHAND_GETSTRAINGAUGE			= (TWOBARRETTHAND_COMMAND + 66),
	TWOBARRETTHAND_GETPOSITIONS				= (TWOBARRETTHAND_COMMAND + 68),
	TWOBARRETTHAND_MOVETWOFINGERS_WAIT		= (TWOBARRETTHAND_COMMAND + 70),
	TWOBARRETTHAND_MOVEALLFINGERS_WAIT		= (TWOBARRETTHAND_COMMAND + 72),
	TWOBARRETTHAND_MOVEFINGERS_WAIT			= (TWOBARRETTHAND_COMMAND + 74),
	TWOBARRETTHAND_MOVESPREAD_WAIT			= (TWOBARRETTHAND_COMMAND + 76),
	TWOBARRETTHAND_MOVEJOINT_WAIT			= (TWOBARRETTHAND_COMMAND + 78),
	TWOBARRETTHAND_MOVEALLFINGERS			= (TWOBARRETTHAND_COMMAND + 80),
	TWOBARRETTHAND_SETMAXSTRAINGAUGE		= (TWOBARRETTHAND_COMMAND + 82),
	TWOBARRETTHAND_GETMAXSTRAINGAUGE		= (TWOBARRETTHAND_COMMAND + 84),
	TWOBARRETTHAND_WRITE_COMMAND_RAW		= (TWOBARRETTHAND_COMMAND + 86),
};

//----------------------------------------------------------------------------------------------------
// PanTilt server

#define PANTILT_COMMAND	2800
enum PANTILT_Command {
	PANTILT_INITIALIZE 					= (PANTILT_COMMAND + 2),
	PANTILT_ISACTIVE					= (PANTILT_COMMAND + 4),
	PANTILT_HOME						= (PANTILT_COMMAND + 6),
	PANTILT_STOP_PAN					= (PANTILT_COMMAND + 8),
	PANTILT_STOP_TILT					= (PANTILT_COMMAND + 10),
	PANTILT_STOP_PANTILT				= (PANTILT_COMMAND + 12),
	PANTILT_RESET_PAN					= (PANTILT_COMMAND + 14),
	PANTILT_RESET_TILT					= (PANTILT_COMMAND + 16),
	PANTILT_RESET_PANTILT				= (PANTILT_COMMAND + 18),
	PANTILT_USE_POSITION_CONTROL		= (PANTILT_COMMAND + 20),
	PANTILT_USE_VELOCITY_CONTROL		= (PANTILT_COMMAND + 22),
	PANTILT_GET_ANGLE_PAN				= (PANTILT_COMMAND + 24),
	PANTILT_GET_ANGLE_TILT				= (PANTILT_COMMAND + 26),
	PANTILT_GET_ANGLE_PANTILT			= (PANTILT_COMMAND + 28),
	PANTILT_MOVE_ANGLE_ABS_PAN			= (PANTILT_COMMAND + 30),
	PANTILT_MOVE_ANGLE_ABS_TILT			= (PANTILT_COMMAND + 32),
	PANTILT_MOVE_ANGLE_ABS_PANTILT		= (PANTILT_COMMAND + 34),
	PANTILT_MOVE_ANGLE_REL_PAN			= (PANTILT_COMMAND + 36),
	PANTILT_MOVE_ANGLE_REL_TILT			= (PANTILT_COMMAND + 38),
	PANTILT_MOVE_ANGLE_REL_PANTILT		= (PANTILT_COMMAND + 40),
	PANTILT_GET_REF_SPEED_PAN			= (PANTILT_COMMAND + 42),
	PANTILT_GET_REF_SPEED_TILT			= (PANTILT_COMMAND + 44),
	PANTILT_GET_REF_SPEED_PANTILT		= (PANTILT_COMMAND + 46),
	PANTILT_SET_REF_SPEED_PAN			= (PANTILT_COMMAND + 48),
	PANTILT_SET_REF_SPEED_TILT			= (PANTILT_COMMAND + 50),
	PANTILT_SET_REF_SPEED_PANTILT		= (PANTILT_COMMAND + 52),
	PANTILT_MOVE_VELOCITY_ABS_PAN		= (PANTILT_COMMAND + 54),
	PANTILT_MOVE_VELOCITY_ABS_TILT		= (PANTILT_COMMAND + 56),
	PANTILT_MOVE_VELOCITY_ABS_PANTILT	= (PANTILT_COMMAND + 58),
	PANTILT_MOVE_VELOCITY_REL_PAN		= (PANTILT_COMMAND + 60),
	PANTILT_MOVE_VELOCITY_REL_TILT		= (PANTILT_COMMAND + 62),
	PANTILT_MOVE_VELOCITY_REL_PANTILT	= (PANTILT_COMMAND + 64),
	PANTILT_GET_REF_ACCELERATION_PAN	= (PANTILT_COMMAND + 66),
	PANTILT_GET_REF_ACCELERATION_TILT	= (PANTILT_COMMAND + 68),
	PANTILT_GET_REF_ACCELERATION_PANTILT= (PANTILT_COMMAND + 70),
	PANTILT_SET_REF_ACCELERATION_PAN	= (PANTILT_COMMAND + 72),
	PANTILT_SET_REF_ACCELERATION_TILT	= (PANTILT_COMMAND + 74),
	PANTILT_SET_REF_ACCELERATION_PANTILT= (PANTILT_COMMAND + 76),
	PANTILT_AROS_LOOK_AT_POSITION		= (PANTILT_COMMAND + 78),
	PANTILT_WAIT_MOTION_END				= (PANTILT_COMMAND + 80),
};

//----------------------------------------------------------------------------------------------------
// VisionBot server

#define VISION_BOT_COMMAND 3000
enum VISION_BOT_Command {	
	VISION_BOT_ISACTIVE 									= (VISION_BOT_COMMAND + 2),								
	VISION_BOT_GET_NUMBER_OBJECTS							= (VISION_BOT_COMMAND + 4),	
	VISION_BOT_GET_POSITION_OBJECT_TYPE						= (VISION_BOT_COMMAND + 6),
	VISION_BOT_GET_ORIENTATION_OBJECT_TYPE					= (VISION_BOT_COMMAND + 8),
	VISION_BOT_GET_INSERTED_OBJECTS							= (VISION_BOT_COMMAND + 10),
	VISION_BOT_GET_POSITION_ORIENTATION_OBJECT_TYPE 		= (VISION_BOT_COMMAND + 12),
	VISION_BOT_GET_POSITION_ORIENTATION_INSERTED_OBJECT_TYPE= (VISION_BOT_COMMAND + 14),
	VISION_BOT_IS_HAND_NEAR									= (VISION_BOT_COMMAND + 16),
	VISION_BOT_GET_HISTOGRAM_HUE							= (VISION_BOT_COMMAND + 18),
	VISION_BOT_IS_OBJECT_TYPE_AT_POSITION					= (VISION_BOT_COMMAND + 20),
	VISION_BOT_GET_POSITION_OF_POINTED_OBJECT				= (VISION_BOT_COMMAND + 22),
	VISION_BOT_AROS_LOOK_AT_POINTED_OBJECT					= (VISION_BOT_COMMAND + 24),
	VISION_BOT_AROS_PAN_TILT_INTERFACE						= (VISION_BOT_COMMAND + 26),
	VISION_BOT_GET_LEARNING_TASK_STATUS						= (VISION_BOT_COMMAND + 28),
	TARGET_GET_ANGLE_AND_DISTANCE							= (VISION_BOT_COMMAND + 30),
	TARGET_GET_ANGLE										= (VISION_BOT_COMMAND + 32),
	TARGET_GET_DISTANCE										= (VISION_BOT_COMMAND + 34),
	VISION_BOT_GET_PANTILT_OBJECT_TYPE						= (VISION_BOT_COMMAND + 36),
	VISION_BOT_GET_DISTANCE_OBJECT_TYPE						= (VISION_BOT_COMMAND + 38),
	VISION_BOT_GET_PANTILT_DISTANCE_OBJECT_TYPE				= (VISION_BOT_COMMAND + 40),
	VISION_BOT_GET_PANTILT_DISTANCE_OBJECT_TYPE_HEAD_ANGLES = (VISION_BOT_COMMAND + 42),
	VISION_BOT_FRAME_SAVING_START_STOP						= (VISION_BOT_COMMAND + 44),
	VISION_BOT_IMAGE_PROCESSING_ENABLE_DISABLE				= (VISION_BOT_COMMAND + 46),
	VISION_BOT_GET_USER_BODY_MOVEMENT						= (VISION_BOT_COMMAND + 48),
	VISION_BOT_GET_HAND_MOVEMENT							= (VISION_BOT_COMMAND + 50),
	VISION_BOT_GET_COLUMNS_INSERTION						= (VISION_BOT_COMMAND + 52),
	VISION_BOT_GET_GESTURE									= (VISION_BOT_COMMAND + 54),
	VISION_BOT_GET_HAND_NEAR_GRIP_TYPE_OBJ_POINTED			= (VISION_BOT_COMMAND + 56),
	VISION_BOT_GET_ROBOT_HUMAN_WORKSPACE_CSG_OBJECTS		= (VISION_BOT_COMMAND + 58),
	VISION_BOT_GET_LEARNING_DRINKING_TASK_STATUS			= (VISION_BOT_COMMAND + 60),
	VISION_BOT_GET_LEARNING_COMPUTERASSEMBLY_TASK_STATUS	= (VISION_BOT_COMMAND + 62),
	VISION_BOT_GET_ORIENTATION_MATRIX_OBJECT_TYPE			= (VISION_BOT_COMMAND + 64),
};

//----------------------------------------------------------------------------------------------------

#define MOTORS_COMMAND 3200
enum MotorsCommand {
	MOTORS_START			= (MOTORS_COMMAND + 2),		//not implemented in Motors_MCDC2805
	MOTORS_RESTART			= (MOTORS_COMMAND + 4),		//Tries to restart Module after an error or power down
	MOTORS_STOP				= (MOTORS_COMMAND + 6),		//Stop Motors ( same as SET_VELOCITY to 0
	MOTORS_TERMINATE		= (MOTORS_COMMAND + 8),		//not implemented in Motors_MCDC2805 ( deprecated )
	MOTORS_SET_VELOCITY		= (MOTORS_COMMAND + 10),	//Set velocity for Robot (linear velocity and angular)
	MOTORS_SET_VELOCITYMODE	= (MOTORS_COMMAND + 12),	//?not implemented in MOTORS_MCDC2805
	MOTORS_SHUTDOWN			= (MOTORS_COMMAND + 14),	//Remote Shutdown Module and Wrapper.
	MOTORS_GET_VELOCITY		= (MOTORS_COMMAND + 16),	//Get linear and angular velocity of robot.
	MOTORS_GET_SET_VELOCITY = (MOTORS_COMMAND + 18),	//Get velocity and after set velocity.
	MOTORS_ENABLE			= (MOTORS_COMMAND + 20),	//Enable locomotion, velocity commands will be accepted
	MOTORS_DISABLE			= (MOTORS_COMMAND + 22),	//Disable locomotion, velocity commands will be ignored, and motors stopped
	MOTORS_ENABLED			= (MOTORS_COMMAND + 24)		//Get actual state of disable/enable
};

//----------------------------------------------------------------------------------------------------

#define YARP_ICE_COMMANDS 3400
enum YarpIceCommands {
	GET_OBJECTS				= (YARP_ICE_COMMANDS + 2),
	GET_GESTURE				= (YARP_ICE_COMMANDS + 4),
	GET_ACTION				= (YARP_ICE_COMMANDS + 6),
	GET_INITIAL_DATA		= (YARP_ICE_COMMANDS + 8),
	GET_COMMON_SUBGOALS		= (YARP_ICE_COMMANDS + 10),
	SET_ACTION				= (YARP_ICE_COMMANDS + 12),
	SET_REQUEST				= (YARP_ICE_COMMANDS + 14),
	SET_ERROR				= (YARP_ICE_COMMANDS + 16),
	OBJECTS_AVAILABLE		= (YARP_ICE_COMMANDS + 18),
	LAST_OBJECT_AVAILABLE	= (YARP_ICE_COMMANDS + 20),
	GESTURE_AVAILABLE		= (YARP_ICE_COMMANDS + 22),
	ARM_FINISHED			= (YARP_ICE_COMMANDS + 24),
	INITIAL_DATA_AVAILABLE	= (YARP_ICE_COMMANDS + 26),
	SPEECH_AVAILABLE		= (YARP_ICE_COMMANDS + 28),
	ACCEPTED_PIECE			= (YARP_ICE_COMMANDS + 30),
};

//----------------------------------------------------------------------------------------------------

#define AUDIO_COMMAND 3600
enum Audio_Command {
	AUDIO_TERMINATE		= (AUDIO_COMMAND + 2),
	AUDIO_INITIALIZE	= (AUDIO_COMMAND + 4),
	AUDIO_MESSAGE		= (AUDIO_COMMAND + 6),
	AUDIO_GETRATE		= (AUDIO_COMMAND + 8),
	AUDIO_GETVOLUME		= (AUDIO_COMMAND + 10),
	AUDIO_SETRATE		= (AUDIO_COMMAND + 12),
	AUDIO_SETVOLUME		= (AUDIO_COMMAND + 14),
	AUDIO_SETLANGUAGE	= (AUDIO_COMMAND + 16),
};

//----------------------------------------------------------------------------------------------------

#define VOICE_COMMAND 3800
enum Voice_Command {
	VOICE_TERMINATE		= (VOICE_COMMAND + 2),
	VOICE_INITIALIZE	= (VOICE_COMMAND + 4),
	VOICE_MESSAGE		= (VOICE_COMMAND + 6),
	VOICE_SET_SENTENCES = (VOICE_COMMAND + 8),
};

//----------------------------------------------------------------------------------------------------

#define DISTANCESENSORS_COMMAND 4000
enum DistanceSensorsCommands {
	DISTANCESENSORS_START					= (DISTANCESENSORS_COMMAND + 2),
	DISTANCESENSORS_STOP					= (DISTANCESENSORS_COMMAND + 4),
	DISTANCESENSORS_TERMINATE				= (DISTANCESENSORS_COMMAND + 6),
	DISTANCESENSORS_GET_DISTANCES			= (DISTANCESENSORS_COMMAND + 8),
	DISTANCESENSORS_GET_DISTANCES_SECTOR	= (DISTANCESENSORS_COMMAND + 10),
};

//----------------------------------------------------------------------------------------------------

#define SUPPORT_COMMAND 4200
enum SupportCommands {
	SUPPORT_TERMINATE		= (SUPPORT_COMMAND + 2),
	SUPPORT_START			= (SUPPORT_COMMAND + 4),
	SUPPORT_STOP			= (SUPPORT_COMMAND + 6),
	SUPPORT_GET				= (SUPPORT_COMMAND + 8),
	SUPPORT_GET_DISTANCE	= (SUPPORT_COMMAND + 10),
	SUPPORT_GET_ANGLE		= (SUPPORT_COMMAND + 12),
	SUPPORT_SET_ORIGIN		= (SUPPORT_COMMAND + 14),
	SUPPORT_SET_POSITION	= (SUPPORT_COMMAND + 16),
};

//----------------------------------------------------------------------------------------------------

#define LOCATION_COMMAND 4400
enum LocationCommands {
	LOCATION_START				= (LOCATION_COMMAND + 2),
	LOCATION_STOP				= (LOCATION_COMMAND + 4),
	LOCATION_TERMINATE			= (LOCATION_COMMAND + 6),
	LOCATION_GET_LOCATION		= (LOCATION_COMMAND + 8),
	LOCATION_GET_POSITION		= (LOCATION_COMMAND + 10),
	LOCATION_GET_ORIENTATION	= (LOCATION_COMMAND + 12), 
	LOCATION_RESET_LOCATION		= (LOCATION_COMMAND + 14),
};

//----------------------------------------------------------------------------------------------------

#define AROSSIM_COMMAND 4600
enum AROSSIM_Command {
	AROSSIM_GET_OBJECT_BOTTLE 	= (AROSSIM_COMMAND + 2),
	AROSSIM_GET_OBJECT_GLASS	= (AROSSIM_COMMAND + 4),
	AROSSIM_GET_OBJECT_STOPPER	= (AROSSIM_COMMAND + 6),
	AROSSIM_GET_HUMAN_BEHAVIOR	= (AROSSIM_COMMAND + 8),
};

//----------------------------------------------------------------------------------------------------

#define RANGE_FINDER_COMMAND 5000
enum RangeFinder_Commands {
	RANGE_FINDER_STOP									= (RANGE_FINDER_COMMAND + 2),
	RANGE_FINDER_SET_RANGE_STEP							= (RANGE_FINDER_COMMAND + 4),
	RANGE_FINDER_SET_RANGE_ANGLE						= (RANGE_FINDER_COMMAND + 6),
	RANGE_FINDER_SET_RANGE_ANGLE_DEG					= (RANGE_FINDER_COMMAND + 8),
	RANGE_FINDER_GET_RESOLUTION							= (RANGE_FINDER_COMMAND + 10),
	RANGE_FINDER_SETUP_STEP								= (RANGE_FINDER_COMMAND + 12),
	RANGE_FINDER_SETUP_ANGLE							= (RANGE_FINDER_COMMAND + 14),
	RANGE_FINDER_SETUP_ANGLE_DEG						= (RANGE_FINDER_COMMAND + 16),
	RANGE_FINDER_GET_ERROR								= (RANGE_FINDER_COMMAND + 18),
	RANGE_FINDER_GET_VALUE_STEP							= (RANGE_FINDER_COMMAND + 20),
	RANGE_FINDER_GET_VALUE_ANGLE						= (RANGE_FINDER_COMMAND + 22),
	RANGE_FINDER_GET_VALUE_ANGLE_DEG					= (RANGE_FINDER_COMMAND + 24),
	RANGE_FINDER_GET_SINGLE_SCAN						= (RANGE_FINDER_COMMAND + 26),
	RANGE_FINDER_START_CONTINUOUS_SCAN					= (RANGE_FINDER_COMMAND + 28),
	RANGE_FINDER_STOP_SCAN								= (RANGE_FINDER_COMMAND + 30),
	RANGE_FINDER_GET_LAST_SCAN							= (RANGE_FINDER_COMMAND + 32),
	RANGE_FINDER_RESTART								= (RANGE_FINDER_COMMAND + 34),
	RANGE_FINDER_SETUP_YARP								= (RANGE_FINDER_COMMAND + 36),
	RANGE_FINDER_SHUTDOWN								= (RANGE_FINDER_COMMAND + 38),	//Remote Shutdown Module and Wrapper.

};

//----------------------------------------------------------------------------------------------------

#define COMMUNICATION_MOBILE_ROBOTS_COMMAND 5200
enum CommunicationMobileRobots {
	COMMUNICATION_MOBILE_ROBOTS_START						= (COMMUNICATION_MOBILE_ROBOTS_COMMAND + 2),
	COMMUNICATION_MOBILE_ROBOTS_STOP						= (COMMUNICATION_MOBILE_ROBOTS_COMMAND + 4),
	COMMUNICATION_MOBILE_ROBOTS_SUPPORT						= (COMMUNICATION_MOBILE_ROBOTS_COMMAND + 6),
	COMMUNICATION_MOBILE_ROBOTS_VECTORIAL_FIELD				= (COMMUNICATION_MOBILE_ROBOTS_COMMAND + 8),
	COMMUNICATION_MOBILE_ROBOTS_OBSTACLES_SIDE_CONTRIBUTION	= (COMMUNICATION_MOBILE_ROBOTS_COMMAND + 10),
};

//----------------------------------------------------------------------------------------------------

#define HLC_COMMAND 5400
enum HLC_Command {
	HLC_TERMINATE					= (HLC_COMMAND + 2),
	HLC_INITIALIZE					= (HLC_COMMAND + 4),
	HLC_MESSAGE						= (HLC_COMMAND + 6),
	HLC_MOVEMENT_ERROR				= (HLC_COMMAND + 8),
	HLC_GOALDIRECTEDACTION			= (HLC_COMMAND + 10),
	HLC_SPEECH						= (HLC_COMMAND + 12),
	HLC_VOICE_RECOGNITION			= (HLC_COMMAND + 14),
	HLC_ARM_IS_COMPLETE				= (HLC_COMMAND + 16),
	HLC_OPEN_CLOSE_HAND				= (HLC_COMMAND + 18),
	HLC_SETARCHCONFIG				= (HLC_COMMAND + 20),
	HLC_SETARCHCONFIGUPDATE			= (HLC_COMMAND + 22),
	HLC_INVALIDARCHCONFIGUPDATE		= (HLC_COMMAND + 24),
	HLC_NOTALLOWEDARCHCONFIGUPDATE	= (HLC_COMMAND + 26)
};

//----------------------------------------------------------------------------------------------------

#define PLAN_COMMAND 5600
enum Plan_Command {
	PLAN_TERMINATE										= (PLAN_COMMAND + 2),
	PLAN_INITIALIZE										= (PLAN_COMMAND + 4),
	PLAN_REQUEST_TRAJECTORY								= (PLAN_COMMAND + 6),
	PLAN_PICK											= (PLAN_COMMAND + 8),
	PLAN_PLACE											= (PLAN_COMMAND + 10),
	PLAN_RETURN											= (PLAN_COMMAND + 12),
	PLAN_POINT											= (PLAN_COMMAND + 14),
	PLAN_PICK_LEFT										= (PLAN_COMMAND + 16),
	PLAN_PLACE_LEFT										= (PLAN_COMMAND + 18),
	PLAN_RETURN_LEFT									= (PLAN_COMMAND + 20),
	PLAN_POINT_LEFT										= (PLAN_COMMAND + 22),
	PLAN_GET_POSITION_ORIENTATION_INSERTED_OBJECT_TYPE	= (PLAN_COMMAND + 24),
	PLAN_ROTATE											= (PLAN_COMMAND + 26),
	PLAN_ROTATE_LEFT									= (PLAN_COMMAND + 28),
	PLAN_PICK_TWOARMS									= (PLAN_COMMAND + 30),
	PLAN_PLACE_TWOARMS									= (PLAN_COMMAND + 32),
	PLAN_RETURN_TWOARMS									= (PLAN_COMMAND + 34),
	PLAN_FINISHED										= (PLAN_COMMAND + 36),
	PLAN_PLACEFILLGLASS									= (PLAN_COMMAND + 38),
	PLAN_RETURNFILLGLASS								= (PLAN_COMMAND + 40),
	PLAN_PLACEOPENBOTTLE								= (PLAN_COMMAND + 42),

};

//----------------------------------------------------------------------------------------------------

#define MATLAB_VIEWER_COMMAND 5800
enum Mat_View_Command{
	Mat_View_GET			= (MATLAB_VIEWER_COMMAND + 2),
	Mat_View_GET_Params		= (MATLAB_VIEWER_COMMAND + 4),
	Mat_View_SET_GET		= (MATLAB_VIEWER_COMMAND + 6),
	Mat_View_MATLAB_CLOSING	= (MATLAB_VIEWER_COMMAND + 8)
};

//----------------------------------------------------------------------------------------------------

#define DIGITAL_COMPASS_COMMAND 6000
enum DigitalCompass_Commands {
	DIGICOMPASS_STOP									= (DIGITAL_COMPASS_COMMAND + 2),
	DIGICOMPASS_GET_RESOLUTION							= (DIGITAL_COMPASS_COMMAND + 4),
	DIGICOMPASS_GET_ERROR								= (DIGITAL_COMPASS_COMMAND + 6),
	DIGICOMPASS_GET_DATA								= (DIGITAL_COMPASS_COMMAND + 8),
	DIGICOMPASS_START_DATA_PORT							= (DIGITAL_COMPASS_COMMAND + 10),
	DIGICOMPASS_STOP_DATA_PORT							= (DIGITAL_COMPASS_COMMAND + 12),
	DIGICOMPASS_RESTART									= (DIGITAL_COMPASS_COMMAND + 14),
	DIGICOMPASS_SETUP_DATA_PORT							= (DIGITAL_COMPASS_COMMAND + 16),
	DIGICOMPASS_SHUTDOWN								= (DIGITAL_COMPASS_COMMAND + 18),	//Remote Shutdown Module and Wrapper.
	DIGICOMPASS_GET_VERSION								= (DIGITAL_COMPASS_COMMAND + 20),
	DIGICOMPASS_GET_ANGLE_8_BIT							= (DIGITAL_COMPASS_COMMAND + 22),
	DIGICOMPASS_GET_ANGLE_16_BIT						= (DIGITAL_COMPASS_COMMAND + 24),
	DIGICOMPASS_GET_PITCH								= (DIGITAL_COMPASS_COMMAND + 26),
	DIGICOMPASS_GET_ROLL								= (DIGITAL_COMPASS_COMMAND + 28),
	DIGICOMPASS_GET_MAGNETOMETER						= (DIGITAL_COMPASS_COMMAND + 30),
	DIGICOMPASS_GET_ACCELEROMETER						= (DIGITAL_COMPASS_COMMAND + 32),
	DIGICOMPASS_GET_ANGLES								= (DIGITAL_COMPASS_COMMAND + 34),
	DIGICOMPASS_CALIBRATION_INIT						= (DIGITAL_COMPASS_COMMAND + 36),
	DIGICOMPASS_CALIBRATION_POINT						= (DIGITAL_COMPASS_COMMAND + 38),
	DIGICOMPASS_CALIBRATION_RESTORE						= (DIGITAL_COMPASS_COMMAND + 40),
};

//----------------------------------------------------------------------------------------------------

#define AM_TO_HLC_COMMAND 6200
enum AM_to_HLC_Commands {
	AM_TO_HLC_GET_OBJECTS		= (AM_TO_HLC_COMMAND + 2),
	AM_TO_HLC_OPEN_CLOSE_HAND	= (AM_TO_HLC_COMMAND + 4),
	AM_TO_HLC_SEND_MOVEMENT		= (AM_TO_HLC_COMMAND + 6),
	AM_TO_HLC_WAIT_FOR_FINISHED	= (AM_TO_HLC_COMMAND + 8),
	AM_TO_HLC_DROPOBJECT		= (AM_TO_HLC_COMMAND + 10),
	AM_TO_HLC_STOP_MOVEMENT		= (AM_TO_HLC_COMMAND + 12)
};

//----------------------------------------------------------------------------------------------------

#define CT_CONTROLLER_COMMAND 6400
enum CTController_Commands {
	CT_CONTROLLER_START				= (CT_CONTROLLER_COMMAND + 2),
	CT_CONTROLLER_STOP				= (CT_CONTROLLER_COMMAND + 4),
	CT_CONTROLLER_GET_CONFIG		= (CT_CONTROLLER_COMMAND + 6),
	CT_CONTROLLER_SET_CONFIG		= (CT_CONTROLLER_COMMAND + 8),
	CT_CONTROLLER_GET_STATUS		= (CT_CONTROLLER_COMMAND + 10),
	CT_CONTROLLER_STORE_FILE		= (CT_CONTROLLER_COMMAND + 12),
	CT_CONTROLLER_STORE_INSTALLER	= (CT_CONTROLLER_COMMAND + 14),
};

//----------------------------------------------------------------------------------------------------

#define AROSSIMULATOR_TO_AM_COMMAND 6600
enum Arossimulator_to_AM_Commands {
	AROSSIMULATOR_TO_AM_SET_OBJECTS		= (AROSSIMULATOR_TO_AM_COMMAND + 2),
	AROSSIMULATOR_TO_AM_UPDATE_POSITIONS= (AROSSIMULATOR_TO_AM_COMMAND + 4),
	AROSSIMULATOR_TO_AM_RESET_OBJECTS	= (AROSSIMULATOR_TO_AM_COMMAND + 6),
};

//----------------------------------------------------------------------------------------------------

#define MATLAB_TO_AM_COMMAND 6800
enum Matlab_to_AM_Commands {
	MATLAB_TERMINATE	= (MATLAB_TO_AM_COMMAND + 2),
	MATLAB_OPEN_FINGER	= (MATLAB_TO_AM_COMMAND + 4),
	MATLAB_CLOSE_FINGER	= (MATLAB_TO_AM_COMMAND + 6),
	MATLAB_PIANO_PRESS	= (MATLAB_TO_AM_COMMAND + 8),
	MATLAB_MOVEMENT_DRINKINGTASK = (MATLAB_TO_AM_COMMAND + 10),
	MATLAB_SIMULATEVISION_DRINKINGTASK = (MATLAB_TO_AM_COMMAND + 12),
	MATLAB_MOVEMENT_TOYVEHICLETASK = (MATLAB_TO_AM_COMMAND + 14),
	MATLAB_SIMULATEVISION_TOYVEHICLETASK = (MATLAB_TO_AM_COMMAND + 16),
	MATLAB_MOVEMENT_COMPUTERASSEMBLYTASK = (MATLAB_TO_AM_COMMAND + 18),
	MATLAB_SIMULATEVISION_COMPUTERASSEMBLYTASK = (MATLAB_TO_AM_COMMAND + 20),
};

//----------------------------------------------------------------------------------------------------
// ImageDisplay server

// Commands
#define IMAGE_DISPLAY_COMMAND 7000
enum ImageDisplay_Commands {
	IMAGE_DISPLAY_SHOW_COLOUR_RGB		= (IMAGE_DISPLAY_COMMAND + 2),
	IMAGE_DISPLAY_SHOW_COLOUR_HSV		= (IMAGE_DISPLAY_COMMAND + 4),
	IMAGE_DISPLAY_SHOW_EMOTION			= (IMAGE_DISPLAY_COMMAND + 6),
	IMAGE_DISPLAY_TRANSITION_TO_EMOTION	= (IMAGE_DISPLAY_COMMAND + 8),
};

// ID's for emotions
namespace EmotionID
{
	enum _EmotionID_ {
		HAPPYNESS = 0,
		SURPRISE,
		NEUTRAL,
		SADNESS,
		FEAR,
		ANGER,
		DISGUST,
		THINKING,
		CONFUSION,
		SUSPICION,
		// Add additional emotions above.
		NUMBER_OF_EMOTION_IMAGES,
	};
};

enum ImageDisplayTask {
	IMAGE_DISPLAY_EMOTIONS = 1,
	// Add additional tasks above.
	NUMBER_OF_IMAGE_DISPLAY_TASKS,
};

//----------------------------------------------------------------------------------------------------
// Wiimote Control server

// Commands
#define WIIMOTE_CONTROL_COMMAND 7200
enum WiimoteControl_Commands {
	WIIMOTE_CONTROL_GET_BUTTONS				= (WIIMOTE_CONTROL_COMMAND + 2),
	WIIMOTE_CONTROL_GET_ORIENTS				= (WIIMOTE_CONTROL_COMMAND + 4),
	WIIMOTE_CONTROL_SET_LEDS				= (WIIMOTE_CONTROL_COMMAND + 6),
	WIIMOTE_CONTROL_GET_LEDS				= (WIIMOTE_CONTROL_COMMAND + 8),
	WIIMOTE_CONTROL_SET_RUMBLE_ON			= (WIIMOTE_CONTROL_COMMAND + 10),
	WIIMOTE_CONTROL_SET_RUMBLE_OFF			= (WIIMOTE_CONTROL_COMMAND + 12),
	WIIMOTE_CONTROL_GET_BAT_LEVEL			= (WIIMOTE_CONTROL_COMMAND + 14),
	WIIMOTE_CONTROL_SET_MOTION_SENSING_ON	= (WIIMOTE_CONTROL_COMMAND + 16),
	WIIMOTE_CONTROL_SET_MOTION_SENSING_OFF	= (WIIMOTE_CONTROL_COMMAND + 18),
	WIIMOTE_CONTROL_TREMBLE					= (WIIMOTE_CONTROL_COMMAND + 20),
	WIIMOTE_CONTROL_GET_ACCELS				= (WIIMOTE_CONTROL_COMMAND + 22),
	WIIMOTE_CONTROL_GET_JOYSTICK_TILTS		= (WIIMOTE_CONTROL_COMMAND + 24),
};

//----------------------------------------------------------------------------------------------------
// Remote Control of Monitor application

// Commands
#define REMOTE_MONITOR_CONTROL_COMMAND 7400
enum Remote_Control_Monitor_Commands {
	REMOTE_MONITOR_CONTROL_DISABLE_LOCOMOTION	= (REMOTE_MONITOR_CONTROL_COMMAND + 2),		//Disable Locomotion movements(command is bypassed to robot locomotion device)
	REMOTE_MONITOR_CONTROL_ENABLE_LOCOMOTION	= (REMOTE_MONITOR_CONTROL_COMMAND + 4),		//Enable Locomotion movements(command is bypassed to robot locomotion device)
	REMOTE_MONITOR_CONTROL_START_TASK			= (REMOTE_MONITOR_CONTROL_COMMAND + 6),		//Start task (e.g. Cooperative transportation)
	REMOTE_MONITOR_CONTROL_STOP_TASK			= (REMOTE_MONITOR_CONTROL_COMMAND + 8),		//Stop task (e.g. Cooperative transportation)
	REMOTE_MONITOR_CONTROL_OPEN_GRIPPER			= (REMOTE_MONITOR_CONTROL_COMMAND + 10),	//Fully open gripper
	REMOTE_MONITOR_CONTROL_CLOSE_GRIPPER		= (REMOTE_MONITOR_CONTROL_COMMAND + 12),	//Close gripper (until safe point)
	REMOTE_MONITOR_CONTROL_GRIPPER_HOLD_OBJ		= (REMOTE_MONITOR_CONTROL_COMMAND + 14),	//Move gripper to grab the object position
};

//----------------------------------------------------------------------------------------------------
// CoopDynSim Manipulator Control Server

#define ARM_COMMAND 7600
enum Arm_Commands {
	ARM_GET_ANGLE					= (ARM_COMMAND + 2),	//Retrieve current angles from each joint
	ARM_SET_ANGLE					= (ARM_COMMAND + 4),	//Set desired angles for each joint
	ARM_GET_NDOF					= (ARM_COMMAND + 6),	//Retrieve manipulator degrees of freedom
	ARM_GET_VELOCITY				= (ARM_COMMAND + 8),	//Retrieve current velocity from each joint
	ARM_SET_VELOCITY				= (ARM_COMMAND + 10),	//Set desired velocity for each joint
	ARM_GET_ACT_DIST				= (ARM_COMMAND + 12),	//Retrieve current displacement of the actuator slider
	ARM_SET_ACT_DIST				= (ARM_COMMAND + 14),	//Set desired displacement of the actuator slider
	ARM_GET_ACT_TYPE				= (ARM_COMMAND + 16),	//Retrieve type of the current end-effector attached to the manipulator
	ARM_SET_SURGICAL_PLAN			= (ARM_COMMAND + 18),	//Set desired surgical plan entities coordinates
	ARM_SELECT_SURGICAL_PLAN_ENTITY	= (ARM_COMMAND + 20),	//Select a surgical plan entity to highlight in the simulator
	ARM_ADD_SURGICAL_PLAN_ENTITY	= (ARM_COMMAND + 22),	//Add a surgical plan entity to the existing ones
	ARM_REMOVE_SURGICAL_PLAN_ENTITY	= (ARM_COMMAND + 24),	//Remove a surgical plan entity from the existing ones
	ARM_REMOVE_ALL_SURGICAL_PLAN	= (ARM_COMMAND + 26),	//Remove whole surgical plan
	ARM_SHOW_ALL_SURGICAL_PLAN		= (ARM_COMMAND + 28),   //Shows all surgical plan entities in surgical environment
}; 


//----------------------------------------------------------------------------------------------------
// Face Coder

namespace Quantity
{
	enum QUANTITY_DEF{
		ABSENT = -1,
		IDLE = 0,
		LOW,
		MEDIUM,
		HIGH,
		LIMIT_QUANTITY,
	};
};

namespace UserInfo
{
	enum USER_INFO_DEF
	{
		FACE_PRESENCE = 0,
		HEAD_MOV,
		NUMBER_INFO_PARAMETERS,
	};
};

#define FACE_CODER_COMMAND 7800
enum Face_Coder_Commands {
	FACE_CODER_GET_AU				= (FACE_CODER_COMMAND + 2),
	FACE_CODER_GET_AU_ALL			= (FACE_CODER_COMMAND + 4),
	FACE_CODER_GET_FACE				= (FACE_CODER_COMMAND + 6),
	FACE_CODER_GET_HEAD_MOVEMENT	= (FACE_CODER_COMMAND + 8),
	FACE_CODER_GET_ALL_INFO			= (FACE_CODER_COMMAND + 10),
};

//----------------------------------------------------------------------------------------------------
//CoopDynSim

#define COOPDYNSIM_COMMAND 8000
enum CoopDynSim_Commands {
	COOPDYNSIM_PLAYBACK_TIME = (COOPDYNSIM_COMMAND + 2),
};

//----------------------------------------------------------------------------------------------------
// VisionESA

namespace ESAObjects
{
	enum ESA_OBJECTS{
		PART_A = 0,
		PART_B,
		PART_C,
		//----------------------------------
		// More objects added above this line
		NUMBER_OF_OBJECTS_ESA,
	};
};

#define VISION_ESA_COMMAND 9000
enum VisionESA_Commands {
	VISION_ESA_GET_POSITION_OBJECT_TYPE				= (VISION_ESA_COMMAND + 2),
	VISION_ESA_GET_POSITION_ORIENTATION_OBJECT_TYPE = (VISION_ESA_COMMAND + 4),
	VISION_ESA_GET_POSITION_ALL_OBJECTS				= (VISION_ESA_COMMAND + 6),
	VISION_ESA_GET_POSITION_ORIENTATION_ALL_OBJECTS = (VISION_ESA_COMMAND + 8),
	VISION_ESA_GET_ORIENTATION_OBJECT_TYPE			= (VISION_ESA_COMMAND + 10),
};

#define PIANOTASKSEMAPHORE_COMMAND	9600
enum PianoTaskSemaphore_Command {
	PIANOTASKSEMAPHORE_START		= (PIANOTASKSEMAPHORE_COMMAND + 2),
	PIANOTASKSEMAPHORE_STOP			= (PIANOTASKSEMAPHORE_COMMAND + 4),
	PIANOTASKSEMAPHORE_RESET		= (PIANOTASKSEMAPHORE_COMMAND + 6),
	PIANOTASKSEMAPHORE_STARTRECALL	= (PIANOTASKSEMAPHORE_COMMAND + 8),
};


#define TOYVEHICLESEMAPHORE_COMMAND	9800
enum ToyVehicleSemaphore_Command {
	TOYVEHICLESEMAPHORE_SEND_COMMAND = (TOYVEHICLESEMAPHORE_COMMAND + 2),
	TOYVEHICLESEMAPHORE_RECEIVE_COMMAND = (TOYVEHICLESEMAPHORE_COMMAND + 4),
};

#endif //_COMMANDS_H_
